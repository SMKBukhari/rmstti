// This is your Prisma schema file for MySQL.
// Learn more about Prisma Schema at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  userId                  String                 @id @unique @default(cuid())
  fullName                String
  email                   String                 @unique
  password                String
  ConfirmPassword         String?
  gender                  Gender                 @default(Male)
  contactNumber           String?
  emergencyContactNumber  String?
  DOB                     DateTime?
  bloodGroup              String?
  city                    String?
  country                 String?
  address                 String?
  userImage               String?
  departmentId            String?
  department              Department?            @relation(fields: [departmentId], references: [id])
  departmentOffered       String?
  designation             String?
  designationOffered      String?
  jobExperience           JobExperience[]
  education               Education[]
  resumeUrl               String?
  resumeName              String?
  resumePublicId          String?
  DOJ                     DateTime?
  cnic                    String?
  workstatusId            String?
  workstatus              WorkStatus?            @relation(fields: [workstatusId], references: [id])
  statusId                String?
  status                  Status?                @relation(fields: [statusId], references: [id])
  applicationStatusId     String?
  applicationStatus       ApplicationStatus?     @relation(fields: [applicationStatusId], references: [id])
  skype                   String?
  linkedIn                String?
  github                  String?
  twitter                 String?
  facebook                String?
  instagram               String?
  behance                 String?
  zoomId                  String?
  googleMeetId            String?
  otpCode                 String?
  otpCodeExpiry           DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  loginSessionToken       String?
  loginSessionExpiry      DateTime?
  isVerified              Boolean?               @default(false)
  isHired                 Boolean?               @default(false)
  salary                  String?
  salaryOffered           String?
  roleId                  String?
  role                    Role?                  @relation(fields: [roleId], references: [id])
  roleOffered             String?
  notifications           Notifications[]
  skills                  Skills[]
  JobApplications         JobApplications[]
  currentJobApplicationId String?
  totalYearlyLeaves       Int                    @default(36)
  totalMonthlyLeaves      Int                    @default(3)
  totalLeavesTaken        Int                    @default(0)
  leaveRequests           LeaveRequest[]
  createdAt               DateTime               @default(now())
  TimeTable               TimeTable[]
  company                 company?               @relation(fields: [companyId], references: [id])
  companyId               String?
  officeTimingIn          String?
  OfficeTimingOut         String?
  Attendence              Attendence[]
  ResignationRequests     ResignationRequests[]
  Warnings                Warnings[]
  updatedAt               DateTime               @default(now())
  Requests                Requests[]
  ProfieUpdateRequests    ProfieUpdateRequests[]
}

model ProfieUpdateRequests {
  id                     String          @id @unique @default(cuid())
  userId                 String
  user                   UserProfile     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  aprroved               Boolean?        @default(false)
  rejected               Boolean?        @default(false)
  fullName               String
  email                  String
  password               String
  ConfirmPassword        String?
  gender                 Gender          @default(Male)
  contactNumber          String?
  emergencyContactNumber String?
  DOB                    DateTime?
  bloodGroup             String?
  city                   String?
  country                String?
  address                String?
  userImage              String?
  jobExperience          JobExperience[]
  education              Education[]
  resumeUrl              String?
  resumeName             String?
  resumePublicId         String?
  cnic                   String?
  skype                  String?
  linkedIn               String?
  github                 String?
  twitter                String?
  facebook               String?
  instagram              String?
  behance                String?
  zoomId                 String?
  googleMeetId           String?
  skills                 Skills[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @default(now())
}

model LeaveRequest {
  id                    String      @id @unique @default(cuid())
  userId                String
  user                  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  leaveTypeId           String
  leaveType             LeaveType   @relation(fields: [leaveTypeId], references: [id])
  startDate             DateTime
  endDate               DateTime
  reason                String
  status                LeaveStatus @default(Pending)
  managerApproval       Boolean?    @default(false)
  adminApproval         Boolean?    @default(false)
  ceoApproval           Boolean?    @default(false)
  requireHigherApproval Boolean?    @default(false)
  approvedBy            String?
  rejectedBy            String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
}

model LeaveType {
  id            String         @id @unique @default(cuid())
  name          String         @unique
  leaveRequests LeaveRequest[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model ResignationRequests {
  id            String            @id @unique @default(cuid())
  userId        String
  user          UserProfile       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  reason        String            @db.LongText
  status        ResignationStatus @default(Pending)
  adminApproval Boolean?          @default(false)
  ceoApproval   Boolean?          @default(false)
  approvedBy    String?
  rejectedBy    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())
}

model Warnings {
  id                String              @id @unique @default(cuid())
  userId            String
  user              UserProfile         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  title             String
  message           String              @db.LongText
  senderName        String
  senderDesignation String
  createdBy         NotificationCreator
  senderImage       String?
  link              String?
  createdAt         DateTime            @default(now())
  isRead            Boolean             @default(false)
}

model Role {
  id        String        @id @unique @default(cuid())
  name      String        @unique
  users     UserProfile[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model WorkStatus {
  id         String        @id @unique @default(cuid())
  name       String        @unique
  users      UserProfile[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  Attendence Attendence[]
}

model Status {
  id        String        @id @unique @default(cuid())
  name      String        @unique
  users     UserProfile[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model ApplicationStatus {
  id              String            @id @unique @default(cuid())
  name            String            @unique
  users           UserProfile[]
  JobApplications JobApplications[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
}

model JobApplications {
  id                     String             @id @unique @default(cuid())
  jobId                  String
  job                    Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId                 String
  user                   UserProfile        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  applicationStatusId    String?
  applicationStatus      ApplicationStatus? @relation(fields: [applicationStatusId], references: [id])
  coverLetter            String?
  department             String?
  resumeUrl              String?
  resumeName             String?
  resumePublicId         String?
  reference              String?
  referenceContact       String?
  appliedDate            DateTime?          @default(now())
  interviewDate          DateTime?
  isInterviewed          Boolean?           @default(false)
  appearance             String?
  communication          String?
  reasoning              String?
  education              String?
  jobKnowledge           String?
  workExperience         String?
  generalKnowledge       String?
  iq                     String?
  pose                   String?
  personality            String?
  salaryExpectation      String?
  strengths              String?
  weaknesses             String?
  remarks                String?
  interviewerName        String?
  interviewerDesignation String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @default(now())
}

model Department {
  id        String        @id @unique @default(cuid())
  name      String        @unique
  users     UserProfile[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model JobExperience {
  id                     String                @id @unique @default(cuid())
  userProfileId          String
  userProfile            UserProfile           @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  jobTitle               String
  employmentType         String
  companyName            String
  location               String
  startDate              DateTime?
  currentlyWorking       Boolean?
  endDate                DateTime?
  description            String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @default(now())
  ProfieUpdateRequests   ProfieUpdateRequests? @relation(fields: [profieUpdateRequestsId], references: [id])
  profieUpdateRequestsId String?

  @@index([userProfileId], name: "idj_userProfileId")
}

model Education {
  id                     String                @id @unique @default(cuid())
  userProfileId          String
  userProfile            UserProfile           @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  university             String
  degree                 String
  fieldOfStudy           String
  grade                  String?
  startDate              DateTime?
  currentlyStudying      Boolean?              @default(false)
  endDate                DateTime?
  description            String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @default(now())
  ProfieUpdateRequests   ProfieUpdateRequests? @relation(fields: [profieUpdateRequestsId], references: [id])
  profieUpdateRequestsId String?

  @@index([userProfileId], name: "ide_userProfileId")
}

model Skills {
  id                     String                @id @unique @default(cuid())
  userProfileId          String
  userProfile            UserProfile           @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  name                   String                @unique
  experienceLevel        String
  ProfieUpdateRequests   ProfieUpdateRequests? @relation(fields: [profieUpdateRequestsId], references: [id])
  profieUpdateRequestsId String?
}

model Notifications {
  id          String              @id @unique @default(cuid())
  userId      String
  user        UserProfile         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  title       String
  message     String
  createdBy   NotificationCreator
  senderImage String?
  link        String?
  createdAt   DateTime            @default(now())
  isRead      Boolean             @default(false)
  type        NotificationType
}

model TimeTable {
  id         String      @id @unique @default(cuid())
  userId     String
  user       UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  date       DateTime
  shiftStart DateTime
  shiftEnd   DateTime
  shiftType  ShiftType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
}

// Company related models
model company {
  id          String        @id @unique @default(cuid())
  name        String        @unique
  logo        String?
  email       String?
  contact     String?
  address     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  UserProfile UserProfile[]
}

model Attendence {
  id           String      @id @unique @default(cuid())
  userId       String
  user         UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  date         DateTime
  workingHours String?
  workStatusId String?
  workStatus   WorkStatus? @relation(fields: [workStatusId], references: [id])
  checkLodId   String?
  checkLog     CheckLog?   @relation(fields: [checkLodId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
}

model CheckLog {
  id           String       @id @unique @default(cuid())
  checkInTime  DateTime
  checkOutTime DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  Attendence   Attendence[]
}

model Job {
  id                String            @id @unique @default(cuid())
  userId            String
  title             String
  description       String?           @db.LongText
  shortDescription  String?           @db.Text
  imageName         String?
  imageUrl          String?
  imagePublicId     String?
  isPusblished      Boolean           @default(false)
  shiftTiming       String?
  salary            String?
  yearsOfExperience String?
  workMode          String?
  department        String?
  attachments       Attachments[]
  applications      JobApplications[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
}

model Attachments {
  id        String   @id @unique @default(cuid())
  name      String
  url       String
  publicId  String
  jobId     String
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Requests {
  id              String      @id @unique @default(cuid())
  title           String
  requestMessage  String
  requestForWhich String?
  other           String?
  userId          String
  user            UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}

enum Gender {
  Male
  Female
  Other
}

enum NotificationType {
  General
  Task
  Event
  Announcement
  ProfileUpdate
  UserCreation
  Verification
  RoleChange
  Alert
  Achievement
  Reminder
  Reward
  Security
}

enum NotificationCreator {
  Applicant
  Admin
  CEO
  Manager
  Employee
  Account
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
  Canceled
  PendingHigherApproval
}

enum ResignationStatus {
  Pending
  Approved
  Rejected
  Canceled
}

enum ShiftType {
  Morning
  Evening
  Off
}
